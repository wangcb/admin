<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2020/6/4
 * Time: 11:07
 */

namespace app\controller;


use app\BaseController;
use app\constants\ErrorCode;
use PhpOffice\PhpWord\IOFactory;
use think\Collection;

class Upload extends BaseController
{

    public function initialize()
    {
        //return parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 上传到本地
     * @author wangcb
     * @return multitype:number
     */
    public function img(){
        $files = request()->file();
        try {
            validate(['image'=>'filesize:10240|fileExt:jpg,png|image:200,200,jpg'])
                ->check($files);
            $savename = [];
            $domain = $this->request->domain();
            foreach($files as $file) {
                $savename[] = $domain.'/'.\think\facade\Filesystem::disk('public')->putFile( 'uploads', $file);
            }
            return Collection::make($savename);
        } catch (\think\exception\ValidateException $e) {
            $this->error(ErrorCode::UPLOAD_FAILED,$e->getMessage()) ;
        }
    }

    public function base64(){
        $base64 = $this->request->param('image');
        if (preg_match('/^(data:\s*image\/(\w+);base64,)/', $base64, $result)){
            $type = $result[2];
            $new_file = "./uploads/avatar/";

            if(!file_exists($new_file)){
                //检查是否有该文件夹，如果没有就创建，并给予最高权限
                mkdir($new_file, 0755);
            }
            $ping_url = $new_file.uniqid().".png";

            if (file_put_contents($ping_url, base64_decode(str_replace($result[1], '', $base64)))){
                return request()->domain().ltrim($ping_url,'.');
            }else{
                return '';
            }
        }else{
            return '';
        }
    }

    /**
     * 上传到本地
     * @author wangcb
     * @return multitype:number
     */
    public function media(){
        $files = request()->file();
        try {
            validate(['media'=>'filesize:10240000|fileExt:mp3,mp4'])
                ->check($files);
            $domain = $this->request->domain();
            $savename = [];
            foreach($files as $file) {
                $savename[] = $domain.'/'.\think\facade\Filesystem::disk('public')->putFile( 'uploads', $file);
            }
            return Collection::make($savename);
        } catch (\think\exception\ValidateException $e) {
            $this->error(ErrorCode::UPLOAD_FAILED,$e->getMessage()) ;
        }
    }

}